{"version":3,"sources":["Types/STATUS.ts","Components/Table.ts","Types/Cell.ts","Services/HammingCodes.ts","Services/HammingCodesReceiver.ts","Types/CellManager.ts","Services/HammingCodesSender.ts","index.ts"],"names":[],"mappings":"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","file":"src.dad127b4.js","sourceRoot":"..\\src","sourcesContent":["export enum STATUS {\r\n    Pass, \r\n    Fail,\r\n    Neutral,\r\n    MultipleErrors,\r\n    ParityBit,\r\n\r\n}","import Cell from \"../Types/Cell\";\r\nimport CellManager from \"../Types/CellManager\";\r\nimport { STATUS } from \"../Types/STATUS\";\r\n\r\nexport default class Table {\r\n\r\n    private head:Cell;\r\n \r\n    constructor(cellManager:CellManager) {\r\n         this.head = cellManager.getHead();\r\n    }\r\n \r\n \r\n    /**\r\n     * render\r\n     \r\n     */\r\n    public render(parentElement:HTMLElement) {\r\n        //clear the parent element \r\n        parentElement.innerHTML = \"\";\r\n\r\n\r\n        const tableLimit = Math.ceil(Math.sqrt(this.countData(this.head)));\r\n        const tableEle = document.createElement(\"table\");\r\n        let curr:Cell = this.head;\r\n\r\n        for(let row = 0; row<tableLimit; row++) {\r\n            const trEle = document.createElement(\"tr\");\r\n            for(let column = 0; column<tableLimit; column++) {\r\n                const tdEle = document.createElement(\"td\");\r\n                if(curr == null) {\r\n                    tdEle.innerText = \"0\";\r\n                    tdEle.style.backgroundColor = \"#808080\";\r\n                }\r\n                else{\r\n                    // tdEle.innerText = curr.getData() + \"\\n\" + curr.getIndex();\r\n                    tdEle.innerText = curr.getData().toString();\r\n                    // tdEle.style.backgroundColor = this.getBackgroundColor(curr.getStatus());\r\n                    tdEle.classList.add(this.getStyleClass(curr.getStatus()))\r\n                    curr = curr.next;\r\n                } \r\n\r\n\r\n                trEle.appendChild(tdEle);\r\n\r\n            }\r\n            tableEle.appendChild(trEle);\r\n        }\r\n        \r\n        parentElement.appendChild(tableEle);\r\n    }\r\n\r\n\r\n    \r\n    private getStyleClass(status:STATUS):string {\r\n        switch(status) {\r\n            case STATUS.Fail: return \"Fail\";\r\n            case STATUS.Neutral: return \"Neutral\";\r\n            case STATUS.Pass: return \"Pass\"; \r\n            case STATUS.MultipleErrors: return \"MultipleErrors\";\r\n            case STATUS.ParityBit: return \"ParityBit\";\r\n        }\r\n    }\r\n\r\n\r\n    private countData(head:Cell | null) {\r\n        let counter = 0;\r\n        let curr:Cell | null = head;\r\n        while(curr != null) {\r\n            counter++;\r\n            curr = curr.next;\r\n        }\r\n        return counter;\r\n    }\r\n\r\n \r\n }","import { Binary, BinaryDigit } from \"./Binary\";\r\nimport { STATUS } from \"./STATUS\";\r\n\r\nexport default class Cell{\r\n    private data:BinaryDigit    \r\n    private status:STATUS\r\n    private index: Binary;\r\n    public next:Cell;\r\n    \r\n    private static maxLength = 8;\r\n\r\n    constructor(data:BinaryDigit, index?:number) {\r\n        this.data = data;\r\n        this.status = STATUS.Neutral;\r\n        this.next = null;\r\n        this.setIndex(index || 0);\r\n    }\r\n\r\n\r\n    public getData():BinaryDigit { return this.data }\r\n    public setData(data:BinaryDigit) { this.data = data }\r\n    public getStatus():STATUS{return this.status}\r\n    public setStatus(status:STATUS){this.status = status;}\r\n    public getIndex(): Binary{\r\n        let results = new Array<BinaryDigit>(Cell.maxLength);\r\n        let i =0;\r\n        for(; i<Cell.maxLength - this.index.length; i++) results[i] = 0;\r\n        for(let j = 0; i<Cell.maxLength; i++) {\r\n            results[i] = this.index[j];\r\n            j++\r\n        }\r\n        return results;\r\n    }\r\n    public setIndex(index:number){\r\n        this.index = index.toString(2).split(\"\").map(num=>parseInt(num) as BinaryDigit);   \r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    \r\n}","import { BinaryDigit } from \"../Types/Binary\";\r\nimport Cell from \"../Types/Cell\";\r\nimport CellManager from \"../Types/CellManager\";\r\n\r\nexport default class HammingCodes {\r\n    cellManager:CellManager;\r\n\r\n    getParityBits():Cell[] {\r\n        let curr = this.cellManager.getHead();\r\n        let parityBits:Cell[] = [];\r\n        while(curr != null) {\r\n            let indexes = curr.getIndex();\r\n            let highBitsCount = 0;\r\n            for(let index of indexes) {\r\n                if(highBitsCount>1) break;\r\n                if(index == 1) highBitsCount++;\r\n            }\r\n            if(highBitsCount == 1) parityBits.push(curr);\r\n            curr = curr.next;\r\n        }\r\n\r\n        return parityBits;\r\n    }\r\n\r\n    findCountsOfOnes() {\r\n        // considering the indexes are 8 in length we can loop though them and count how many ones per index ie \r\n        //0,0,0,0,0,0,1,0\r\n        //0,0,0,0,0,1,1,0\r\n        //this will result in 2 in the 2nd index and 1 in the first index\r\n        let counters:{[key:number]:number} = {}\r\n        let curr:Cell = this.cellManager.getHead();\r\n        let numberIndex =0;\r\n\r\n        while(curr != null ){\r\n            let index = curr.getIndex();\r\n            let data = curr.getData();\r\n            for(let i = 0; i<index.length; i++){\r\n                if(index[i] == 1 && data == 1) {\r\n                    if(counters[i] == null) counters[i] = 1;\r\n                    else counters[i]++;\r\n                }\r\n            }\r\n\r\n            curr = curr.next;\r\n        }\r\n        return counters;\r\n    }\r\n\r\n        \r\n    convertStringBinaryDigitsToCells(data:string[]):Cell {\r\n        let firstDigit:BinaryDigit = Number.parseInt(data[0]) as BinaryDigit;\r\n        let start = new Cell(firstDigit,0);\r\n        let curr = start;\r\n        for(let i = 1; i<data.length;i++) {\r\n            let digit = Number.parseInt(data[i]) as BinaryDigit;\r\n            curr.next = new Cell(digit,i);\r\n            curr = curr.next;\r\n        }\r\n\r\n        return start;\r\n    }\r\n\r\n\r\n}","import Cell from \"../Types/Cell\";\r\nimport CellManager from \"../Types/CellManager\";\r\nimport { STATUS } from \"../Types/STATUS\";\r\nimport HammingCodes from \"./HammingCodes\";\r\n\r\n\r\n\r\nexport default class HammingCodesReceiver extends HammingCodes {\r\n\r\n    private head:Cell | null;\r\n    private errorFound = false;\r\n\r\n    private data = {\r\n        firstTestColumns: {\r\n            cells: new Array<Cell>(),\r\n            others: new Array<Cell>()\r\n        }, \r\n        secondTestColumns: {\r\n            cells: new Array<Cell>(),\r\n            others: new Array<Cell>()\r\n        },\r\n        thirdTestRows: {\r\n            cells: new Array<Cell>(),\r\n            others: new Array<Cell>()\r\n        },\r\n\r\n        forthTestRows: {\r\n            cells: new Array<Cell>(),\r\n            others: new Array<Cell>()\r\n        }\r\n\r\n\r\n    }\r\n\r\n    \r\n\r\n    constructor(cellManager:CellManager) {\r\n        super();\r\n        this.cellManager = cellManager;\r\n        this.head = cellManager.getHead();\r\n        this.prepRows();\r\n    }\r\n\r\n\r\n    public checkData() {\r\n        this.check1()\r\n        this.check2()\r\n        this.check3()\r\n        this.check4()\r\n        // this.twoErrorCheck()\r\n    }\r\n\r\n    public getData() {\r\n        return this.cellManager;\r\n     \r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Check1 checks if the odd colums are even or odd ( expected to be even)\r\n     */\r\n    public check1() {\r\n        return this.test(this.data.firstTestColumns);\r\n    }\r\n\r\n\r\n    public check2() {\r\n        return this.test(this.data.secondTestColumns);\r\n    }\r\n\r\n\r\n    public check3() {\r\n        return this.test(this.data.thirdTestRows);\r\n    }\r\n\r\n    public check4() {\r\n        return this.test(this.data.forthTestRows);\r\n    }\r\n\r\n\r\n    public twoErrorCheck() {\r\n        let countOfOnes = this.countTheOnesInNode(this.head);\r\n        if(this.errorFound && countOfOnes%2 == 0) {\r\n            let curr = this.head;\r\n            while(curr!= null) {\r\n                curr.setStatus(STATUS.MultipleErrors);\r\n                curr = curr.next;\r\n            }\r\n        } else if(!this.errorFound && countOfOnes%2 == 0) {\r\n            this.head.setStatus(STATUS.Pass)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private test (array: { cells: Array<Cell>; others: Array<Cell>; }):boolean {\r\n        const {cells, others} = array;\r\n        let countOfOnes:number = this.countTheOnes(cells);\r\n\r\n        // if the count is even \r\n        if(countOfOnes%2 == 0) {\r\n            for(let cell of cells) cell.setStatus(STATUS.Pass);\r\n            return true;\r\n\r\n        } else {\r\n            //if not \r\n            for(let cell of cells) \r\n            {\r\n                if(cell.getStatus() != STATUS.Pass) {\r\n                    cell.setStatus(STATUS.Fail);\r\n                }\r\n            }\r\n\r\n            //passing the others \r\n            for(let cell of others) {\r\n                cell.setStatus(STATUS.Pass);\r\n            }\r\n            this.errorFound = true;\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public prepRows() {\r\n        let curr:Cell = this.head;\r\n        while(curr!= null ) {\r\n            let index = curr.getIndex();\r\n\r\n            //first check data\r\n            if(index[index.length-1] == 1) this.data.firstTestColumns.cells.push(curr)\r\n            else this.data.firstTestColumns.others.push(curr);\r\n\r\n            if(index[index.length-2] == 1) this.data.secondTestColumns.cells.push(curr);\r\n            else this.data.secondTestColumns.others.push(curr);\r\n\r\n            if(index[index.length-3] == 1) this.data.thirdTestRows.cells.push(curr);\r\n            else this.data.thirdTestRows.others.push(curr);\r\n\r\n            if(index[index.length-4] == 1) this.data.forthTestRows.cells.push(curr);\r\n            else this.data.forthTestRows.others.push(curr);\r\n\r\n            \r\n            curr = curr.next;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private countTheOnes(cells:Cell[]):number {\r\n        let countOfOnes = 0;\r\n        //get the count of ones \r\n        for(let cell of cells){\r\n            if(cell.getData() == 1) countOfOnes++;\r\n        }\r\n        return countOfOnes;\r\n    }\r\n\r\n    \r\n    private countTheOnesInNode(head:Cell):number {\r\n        let countOfOnes = 0;\r\n        let curr = this.head;\r\n        while(curr != null) {\r\n            if(curr.getData() == 1) countOfOnes++;\r\n            curr = curr.next;\r\n        }\r\n        return countOfOnes;\r\n    }\r\n}","import { logData } from \"../Services/Tools\";\r\nimport Cell from \"./Cell\";\r\nimport { STATUS } from \"./STATUS\";\r\n\r\nexport default class CellManager {\r\n    private head:Cell;\r\n    private size:number;\r\n    public constructor(cells?:Cell) {\r\n        if(cells == null) this.head = null\r\n        else this.head = cells;\r\n\r\n        this.size = this.countData(cells);\r\n    }\r\n\r\n    public addToTheBeginning(cell: Cell):void {\r\n        if(this.head == null) this.head = cell;\r\n        cell.next = this.head;\r\n        this.head = cell;\r\n        this.size++;\r\n    }\r\n\r\n    public addToTheEnd(cell: Cell):void {\r\n        let lastCell = this.getCell(this.size - 1);\r\n        lastCell.next = cell;\r\n        this.size++;\r\n    }\r\n\r\n    public addCellByIndex(cell:Cell, index:number):void {\r\n        if(index === 0) return this.addToTheBeginning(cell);\r\n        if(index >= this.size) return this.addToTheEnd(cell);\r\n\r\n        let before = this.getCell(index -1);\r\n        let after = this.getCell(index);\r\n\r\n        cell.next = after;\r\n        before.next = cell;\r\n\r\n        this.size++;\r\n    }\r\n\r\n    public getLastCell():Cell {\r\n        return this.getCell(this.size-1);\r\n    }\r\n\r\n    public getCell(index: number): Cell {\r\n        if(index > this.size-1) return null;\r\n        \r\n        let curr = this.head;\r\n        for(let i = 0; i<=index; i++) curr = curr.next;\r\n\r\n        return curr;\r\n    }\r\n\r\n    public getHead():Cell {\r\n        return this.head;\r\n    }\r\n\r\n    \r\n    public expandListSize(expectedSize:number):void {\r\n\r\n        for(let i = this.size; i<expectedSize; i++) {\r\n            let temp = new Cell(0,i);\r\n            temp.next = this.head;\r\n            this.head = temp;\r\n        }\r\n        \r\n    }\r\n\r\n    public makeListSquareable():void {\r\n        let base = 2;\r\n        while(this.size > base) {\r\n            base = Math.pow(base,2);\r\n        }\r\n        \r\n        this.expandListSize(base);\r\n    }\r\n\r\n    public reIndexCells():void {\r\n        let curr = this.head;\r\n        let index = 0;\r\n        while(curr != null) {\r\n            curr.setIndex(index);\r\n            curr = curr.next;\r\n            index++;\r\n        }\r\n    }\r\n\r\n    public getSize():number {\r\n        return this.size;\r\n    }\r\n\r\n    private countData(head:Cell) {\r\n        let counter = 0;\r\n        let curr:Cell = head;\r\n        while(curr != null) {\r\n            counter++;\r\n            curr = curr.next;\r\n        }\r\n        return counter;\r\n    }\r\n\r\n}","import { Binary, BinaryDigit } from \"../Types/Binary\";\r\nimport Cell from \"../Types/Cell\";\r\nimport CellManager from \"../Types/CellManager\";\r\nimport { STATUS } from \"../Types/STATUS\";\r\nimport HammingCodes from \"./HammingCodes\";\r\nimport { countData, logData } from \"./Tools\";\r\n\r\nexport default class HammingCodesSender extends HammingCodes {\r\n\r\n    constructor(data: string) {\r\n        super();\r\n        let binaryData:string[] = this.getBinaryData(data);\r\n        let cells:Cell = this.convertStringBinaryDigitsToCells(binaryData);\r\n        this.cellManager = new CellManager(cells);\r\n        this.addParityBits();\r\n        this.cellManager.reIndexCells();\r\n        \r\n    }\r\n\r\n\r\n\r\n    private addParityBits() {\r\n        let currentIndex = 1;\r\n        \r\n        for(let exponent = 0; currentIndex < this.cellManager.getSize(); exponent++) {\r\n            let cell = new Cell(0);\r\n            cell.setStatus(STATUS.ParityBit)\r\n            this.cellManager.addCellByIndex(cell, currentIndex-1);\r\n            currentIndex = Math.pow(2,exponent);\r\n        }\r\n        \r\n\r\n        this.cellManager.reIndexCells();\r\n        this.setParityBits();\r\n\r\n        \r\n    }\r\n\r\n    private setParityBits() {\r\n        let parityBits = this.getParityBits();\r\n        for(let parityBit of parityBits) {\r\n            const parityGroupIndex = parityBit.getIndex().indexOf(1);\r\n            const countsOfOnesPerGroup = this.findCountsOfOnes();\r\n            if(countsOfOnesPerGroup[parityGroupIndex] != undefined && countsOfOnesPerGroup[parityGroupIndex] % 2 != 0) {\r\n                parityBit.setData(1);\r\n            }\r\n        }\r\n\r\n            \r\n    }\r\n\r\n    public getCells():CellManager {\r\n        return this.cellManager;\r\n    }\r\n\r\n    private getBinaryData(data: string) {\r\n        let binaryData:string[] = data.split(\"\").map(val=>val.charCodeAt(0).toString(2));\r\n        for(let i = 0; i<binaryData.length; i++) {\r\n            let data = binaryData[i].split(\"\");\r\n            while(data.length < 8) data.unshift(\"0\");\r\n            binaryData[i] = data.join(\"\");\r\n        }\r\n        binaryData = binaryData.join(\"\").split(\"\");\r\n        return binaryData;\r\n        \r\n    }\r\n\r\n    private setZeroIndexParity() {\r\n        let curr = this.cellManager.getHead();\r\n        let countOfOnes = 0;\r\n        while(curr != null) {\r\n            if(curr.getData() == 1) countOfOnes++;\r\n            curr = curr.next;\r\n        }\r\n\r\n        if(countOfOnes % 2 != 0) {\r\n            this.cellManager.getHead().setData(1)\r\n        }\r\n    }\r\n\r\n}","import Table from \"./Components/Table\";\r\nimport HammingCodesReceiver from \"./Services/HammingCodesReceiver\"\r\nimport HammingCodesSender from \"./Services/HammingCodesSender\";\r\nimport { BinaryDigit } from \"./Types/Binary\";\r\nimport Cell from \"./Types/Cell\";\r\nimport '@fortawesome/fontawesome-free/css/all.css'\r\nimport \"./styles.scss\";\r\n\r\nlet table;\r\n\r\nconst sender:HTMLElement = <HTMLElement> document.getElementById(\"sender\");\r\nconst reciver:HTMLElement = <HTMLElement> document.getElementById(\"reciver\");\r\n\r\nconst hammingCodes = new HammingCodesSender(\"H\");\r\nlet data = hammingCodes.getCells()\r\ntable = new Table(data);\r\ntable.render(sender);\r\n\r\nconst hammingCodesReciver = new HammingCodesReceiver(data);\r\nhammingCodesReciver.checkData();\r\ndata = hammingCodesReciver.getData();\r\ntable = new Table(data);\r\ntable.render(reciver);"]}